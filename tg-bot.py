import os
import logging
import io
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from telegram.ext import Updater, MessageHandler, Filters, CommandHandler, CallbackContext, CallbackQueryHandler
from reportlab.pdfgen import canvas
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont


logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "—Ç–æ–∫–µ–Ω —Å–∫—Ä—ã—Ç")
OCR_SERVICE_URL = "http://localhost:8000/recognize"


pdfmetrics.registerFont(TTFont("Arial", "C:\\Windows\\Fonts\\arial.ttf"))

def start(update: Update, context: CallbackContext):
    update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç!\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º.\n"
        "–ë—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞."
    )

def handle_photo(update: Update, context: CallbackContext):
    try:
        photo_file = update.message.photo[-1].get_file()
        photo_bytes = io.BytesIO()
        photo_file.download(out=photo_bytes)
        photo_bytes.seek(0)
        update.message.reply_text("üîÑ –†–∞—Å–ø–æ–∑–Ω–∞—é —Ç–µ–∫—Å—Ç –Ω–∞ —Ñ–æ—Ç–æ...")
        files = {'file': ('image.png', photo_bytes.getvalue())}
        data = {'lang_mode': 'auto'}
        response = requests.post(OCR_SERVICE_URL, files=files, data=data)
        if response.status_code == 200:
            result = response.json()
            text = result.get('text', '')
            status = result.get('status', '')
            if status == 'empty':
                update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º.")
            elif text.strip():
                context.user_data['recognized_text'] = text
                keyboard = [[InlineKeyboardButton("–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ PDF", callback_data="to_pdf")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                update.message.reply_text(f"üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n{text}", reply_markup=reply_markup)
            else:
                update.message.reply_text("–¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω.")
        else:
            update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–∏—Å—É —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è.")
        context.user_data['photo_bytes'] = photo_bytes.getvalue()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        update.message.reply_text(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")

def handle_non_photo(update: Update, context: CallbackContext):
    update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º.")

def button_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    if query.data == "to_pdf":
        text = context.user_data.get('recognized_text', '')
        if not text.strip():
            query.message.reply_text("–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏.")
            return
        pdf_buffer = io.BytesIO()
        c = canvas.Canvas(pdf_buffer)
        c.setFont("Arial", 12)
        text_object = c.beginText(40, 800)
        for line in text.split('\n'):
            text_object.textLine(line)
        c.drawText(text_object)
        c.save()
        pdf_buffer.seek(0)
        query.message.reply_document(document=InputFile(pdf_buffer, filename="recognized_text.pdf"))

def main():
    updater = Updater(token=TELEGRAM_TOKEN, use_context=True)
    dp = updater.dispatcher
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(MessageHandler(Filters.photo, handle_photo))
    dp.add_handler(MessageHandler(~Filters.photo, handle_non_photo))
    dp.add_handler(CallbackQueryHandler(button_callback))
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()